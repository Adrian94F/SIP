function [y1] = lqr_neural_network(x1)
%LQR_NEURAL_NETWORK neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2017 23:18:59.
% 
% [y1] = lqr_neural_network(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 4xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00102368797925056;0.000604474319256143;0.000373198762699145;0.000222913084816367];
x1_step1.gain = [2.00369812509176;2.00197777696418;2.00150771329065;2.00492689716715];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.6129208202457455;0.89636234833526196;-0.22900863988422418;-1.256924069539715];
IW1_1 = [0.63097339046185441 0.26477798227708427 1.6104665325784195 -0.013461172239011374;-0.6496247509013835 -1.1088418010607175 0.97228208694768503 0.012595481714670368;-0.326787645639251 -0.12991023371785015 -0.77326406500764111 -0.0053451081327908741;-1.0837612660947522 -0.24102638019480324 1.3201234876415531 -0.011735435466776575];

% Layer 2
b2 = [0.26093329063830362;0.23231318764098194;0.2186478655911574;-0.13093839702808685];
LW2_1 = [-0.38195772056867949 -0.15725214778930868 0.82813650000577088 0.16916954742635182;-0.25154605536476582 0.13253591282612409 0.84187641255110046 0.31126700658440176;-0.27111240635976375 -0.11042274584922722 0.74361783601861831 0.23786665393224138;-0.72155629096339657 -0.89735686114103919 0.36808865331551899 0.32553675841054552];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0789016089635331;0.0322012806243379;0.397524228264783;77891160.9362426];
y1_step1.xoffset = [-25.4536007711393;-95.3935449312917;-13.3279678420008;-10.0000000090549];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
