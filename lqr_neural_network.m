function [y1] = lqr_neural_network(x1)
%LQR_NEURAL_NETWORK neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Dec-2017 20:50:32.
% 
% [y1] = lqr_neural_network(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 4xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.000522375356944771;0.00034146221813891;0.000658667586112327;0.001463175172423];
x1_step1.gain = [2.00206363762381;2.00172870007607;2.00173370785254;2.00338582718095];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0631979049474101;-0.14312762119851757;-0.15486785687595486;2.3554449624629408];
IW1_1 = [-1.1433590738831985 -0.0672088615840402 0.87290896692474351 -0.034943084041634029;0.39840869577093896 0.11947386278801661 0.28675723541854858 0.0082740793151132013;-0.36929730562151059 -0.95643798442193584 1.0246740378254933 -0.015727299788976627;-0.45025950139324755 0.35777203108215849 1.7210207091774283 -0.057587002152097062];

% Layer 2
b2 = [0.2006313759802332;0.23766189334100721;0.27959553763569661;0.58431367906512244];
LW2_1 = [-0.44428225034030322 -1.6320968709743682 -0.19812584454630972 -0.0061769971492774117;-0.21272504979930992 -1.5248831522708952 0.092572141125573743 -0.2171873986947328;-0.16187211250370206 -1.2359404412389194 -0.12670993262165631 -0.3837385524447478;0.61102031115104349 0.84541581308545344 0.75612588541321291 0.28467831416587436];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0839309972687718;0.0340579080152726;0.409767449592783;15300746.2813248];
y1_step1.xoffset = [-23.9184570984568;-92.4876972914267;-13.0539199326164;-10.000000028871];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
