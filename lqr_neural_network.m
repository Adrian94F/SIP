function [y1] = lqr_neural_network(x1)
%LQR_NEURAL_NETWORK neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2017 23:31:57.
% 
% [y1] = lqr_neural_network(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 4xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00092684615216243;0.000258306813940345;6.22511895154165e-06;0.00084619426096777];
x1_step1.gain = [2.00698246122516;2.00188498693946;2.0027026539522;2.00451359663081];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.80682431723764259;0.51768277290700893;0.83973174236207737;1.6381584392510076];
IW1_1 = [-0.68335832198873203 -0.36306745093275927 -0.49084104367357645 -0.010204813352016869;-0.31725354958641211 -0.25126890199518048 0.55655289496177307 0.0022124127409560829;1.0565931548318923 0.28732524503917822 0.19283306201535741 0.027247336059961692;-0.37577279432957467 0.94221661649637178 1.4157335743412511 -0.020984199292564239];

% Layer 2
b2 = [0.539001831722285;0.2347822861343008;0.18865989607138003;0.99582967945415923];
LW2_1 = [0.73178305609152416 -1.020592076789711 -0.45387050685642272 -0.09396256630209214;0.72400516290887895 -0.27458915743725787 -0.43360843757355344 -0.19431205280582303;0.65638588148459442 -0.69922611758147935 -0.45829618781050269 0.085592493783722551;0.51834718106798983 -0.6135609081928679 -0.15510454523051428 -0.82020755148912206];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0790853909921921;0.0325607478241872;0.398027654961636;7224503.44154752];
y1_step1.xoffset = [-25.3124814698664;-95.3197669796897;-13.3308953355911;-10.0000002368251];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
