function [y1] = lqr_neural_network(x1)
%LQR_NEURAL_NETWORK neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 16-Dec-2017 17:53:10.
% 
% [y1] = lqr_neural_network(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 4xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1.1007341536251e-05;1.0854234537061e-05;6.22511895154165e-06;2.26690043652056e-05];
x1_step1.gain = [2.00006956571635;2.00003234871594;2.00001572799201;2.00006109248878];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.83130792765223105;0.15495639031716668;0.22359975666052995;-2.599307786084228];
IW1_1 = [0.56202741208505924 -0.0015993972905618994 -0.46350206664493399 0.01239341035504544;-0.36322437886990622 -0.027903169547502823 -0.25801379058139795 -0.0047157642678269046;-0.20078804441316317 -0.10150505593565408 0.00016919833266401693 -0.0031298616245653424;-0.27562789049428288 -0.54895178380329956 0.0058186123167997894 0.65632104666478797];

% Layer 2
b2 = [0.21807572642293255;0.031945539781070696;-0.4979609322012879;0.84830740631258028];
LW2_1 = [0.97601519349813659 1.8704609915988786 -0.13511695597448972 -0.36225446276127349;0.79155050737080623 0.8898132506164933 1.9585343463185139 -0.03924835996404083;0.70712782434493959 1.3306078791268185 0.52678378323895791 -0.71660769851046169;-0.34579019869317684 -0.01191734789260512 0.68828459276823373 0.26726032022919527];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0781714065648598;0.0310408447896779;0.371970581465878;262.149648121691];
y1_step1.xoffset = [-25.5939998547934;-96.624827808111;-13.4865190738607;-10.0072739468887];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
