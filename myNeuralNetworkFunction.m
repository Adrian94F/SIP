function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Nov-2017 20:21:36.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [22;118.5;29.5;31.1;79.3;69.4;85;47.2;33;19.1;24.8;21;15.8];
x1_step1.gain = [0.0338983050847458;0.00817494379726139;0.0414507772020725;0.099502487562189;0.0351493848857645;0.0254129606099111;0.0318979266347687;0.0498753117206983;0.124223602484472;0.135135135135135;0.099009900990099;0.143884892086331;0.357142857142857];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.7926791562620215;-1.0311882099517551;0.67683047562854637;-0.90341812953841627;-0.27602267906271033;-0.12719400684835014;-0.92337516090490557;1.2775031279502103;-1.2989723770035522;1.3929837336255635];
IW1_1 = [-0.42093352477396356 0.0046520134772891318 0.70164333258880784 -0.33605666727210681 -0.64661710429736841 -0.28695915315505738 0.30903443191869923 -0.31634340053521726 1.7794434613975847 -0.03155351049467129 0.76352512617712853 0.39498008638550242 -0.58442082801791073;0.98080131262781234 -0.059102297626903229 -0.27521650908163919 1.0942294928473812 0.20410329779907382 0.33635163366110721 0.10246651486275933 -0.68182827992677797 0.19279772036713078 1.1747273428681768 -0.19075393114301561 -0.88900366480654036 0.68775449271298594;-0.092196526646025345 -0.60651516521785975 -0.069812229581778823 -0.11722590644361885 0.21696729552982763 1.6674916302139557 -0.022155596375434766 -0.42783776481354047 0.31792147928995423 -0.73315706628068722 -0.66164385207608534 0.31963769805314302 -0.39726227812616222;1.0906387416773524 0.48167204703565369 0.57873666433431348 -0.23750585332121357 0.11423727213763735 -0.08617782446671178 -0.1171752307400028 0.42451660183351142 0.70737886074350909 1.1899097902392597 0.67238156222746603 -0.31513736074916626 -0.81922513169297939;0.42084240886232377 0.58768124745721806 -0.9234488228946125 1.0291844147428839 -0.017347788430092225 0.34092446362266576 -0.13313471647629446 0.64799024376264358 0.038763798210855148 0.73232909957562187 -0.39610649211173332 0.17664845356438086 0.49995636689484069;0.39772127611887137 -0.86936525610872928 -0.47002468378831036 0.70787679199442088 -0.73275693545480991 1.2737332486018671 -0.5410145635429382 0.78002180845643188 -0.48259662164633466 -0.66513955903424249 0.052254097709630132 0.63382708678205824 0.68084487370493196;-0.19120654100573298 -0.7617157089304406 -0.099420570790567181 -0.049733019545061076 -0.80560073180459502 0.63578385444881247 -1.1272080002832621 -0.36145389735438266 -0.21407324527005861 -1.0312797201898662 0.153481545043642 0.50846187433648593 1.3764456698689151;0.6063661936236302 0.58227538969277648 -0.19048655147038032 0.62888926296593761 -0.16841064310559514 0.38505450807521568 -0.58390811844034496 -1.4262729990118785 -1.3141396690999432 0.31136161666781537 0.95395350508682386 0.24204841936030089 -0.017817185669794608;-1.0908979509467363 -0.60930474928593192 0.088636270613457607 0.03755388913789369 -0.96774324563151681 0.11407645129372002 0.24299919404604162 0.2376127857209222 -0.16100898045695777 -0.5966273605372342 -0.90442594295196554 -0.71850748068108905 0.25092058185820559;0.008622767259191047 0.41753807254867259 -0.46463063734717358 1.8631516745438792 0.45790649787825349 -0.5065037114993266 0.67792083812043713 -1.608869458351331 -0.050779577719938601 -0.89298545048833822 -0.48057006821975501 1.1235422512283959 -0.72540443951237588];

% Layer 2
b2 = 0.16061316250811503;
LW2_1 = [0.41964170203062129 0.96507457940482833 1.0400460871303139 -0.83645316978235362 0.21387413942424108 0.18645277552491091 -0.39365851088400616 0.54236262700128446 -0.14772906100180122 -0.73470415610233253];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0421052631578947;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
